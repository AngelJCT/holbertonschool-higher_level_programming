The ``7-base_geometry`` module
================================

Using ``integer_validator`` function
---------------------------------

importing the ``BaseGeometry`` class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    
    try:
        bg.integer_validator("name", "John")
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))
    
    try:
        bg.integer_validator("old_age", -3)
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))

    try:
        bg.integer_validator("number", None)
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))
    
    try:
        bg.integer_validator("age", True)
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))
    
    try:
        bg.integer_validator("age", [3])
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))

    try:
        bg.integer_validator("age", (1,))
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))

    try:
        bg.integer_validator("age", {1, 2})
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))

    try:
        bg.integer_validator()
    except Exception:
        print("No arguments")

    try:
        bg.integer_validator("age")
    except Exception:
        print("Missing value")

    try:
        bg.integer_validator("age", 3, 4)
    except Exception:
        print("Too many arguments")
    
    try:
        bg.integer_validator("age", "3")
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))
    
    try:
        print(bg.area())
    except Exception as e:
        print("[{}] {}".format(e.__class__.__name__, e))
